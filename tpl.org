#+TITLE: TRL Workshop
#+AUTHOR: Gabby Resch

#+ox-ipynb-keyword-metadata: key1 key2

* Introduction
This is a very basic set of instructions for preparing 3D-printed visualizations from datasets available through the City of Toronto's [[https://portal0.cf.opendata.inter.sandbox-toronto.ca/][Open Data Portal]]. 
* Preparation
- Make sure you have a working Python installation!
- Download Anaconda (if you don't have a Python installation): https://www.anaconda.com/download/
- You will need the following Python libraries: pandas, numpy, stat, matplotlib, seaborn, plotly
- Set up JupyterLab or Jupyter Notebook: https://anaconda.org/conda-forge/jupyterlab
- Download Blender if you don't have 3D modeling software: https://www.blender.org/download/
- Download QGIS if you want to create maps: https://qgis.org/en/site/forusers/download.html
* Data Sources
We will be taking data from the City of Toronto's portal, but there are various other interesting datasets that you might consider working with: biometric/self-tracking/fitbit; kaggle datasets (the pokemon one is fun if you're working with kids); 

That said, I would recommend working with a simple dataset first, or spending lots of time looking at your data in a spreadsheet before moving forward. I have included some very basic cleaning functions in the notebook cells below. 

Some tips on selecting and preparing your data:
- There are various tools you can use to clean/munge/prepare your data, including Excel, Libre Office Calc, R, etc. I prefer pandas, a Python library for data analysis. There are numerous excellent tutorials that detail how to import and prepare data (using pandas) in an iPython/Jupyter notebook  
- If you are using a 

For this exercise, we will be working with pedestrian data from the King Street Pilot Project. All data was scraped from the .pdf reports that the city of Toronto has made available here: https://www.toronto.ca/city-government/planning-development/planning-studies-initiatives/king-street-pilot/data-reports-background-materials/
The data is available in the data directory of the repository that contains this file.  
* Working with Data in Jupyter

Import the necessary libraries:
#+BEGIN_SRC ipython 
import pandas as pd
import numpy as np
import stat as st
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.plotly as py
import plotly.graph_objs as go
#+END_SRC

Import your data:
#+ipynb-newcell
# data import
#+BEGIN_SRC ipython
pvol = pd.read_csv('../king/data/king_pedestrian_volume.csv')
#+END_SRC

Set the figure size for data graphics:
#+ipynb-newcell
#+BEGIN_SRC ipython
plt.rcParams['figure.figsize'] = [10, 8]
#+END_SRC

Set the index for the pandas dataframe you've created:
#+ipynb-newcell
#+BEGIN_SRC ipython
pvol.set_index('street')
#+END_SRC
#+RESULTS:

Create some objects for each street:
#+ipynb-newcell
#+BEGIN_SRC ipython
#### am objects
# bathurst
pvol_bathurst_am = pvol[['street',
                         'am_bathurst_baseline',
                         'am_bathurst_january',
                         'am_bathurst_february',
                         'am_bathurst_march',
                         'am_bathurst_april',
                         'am_bathurst_may',
                         'am_bathurst_june']]

# spadina
pvol_spadina_am = pvol[['street',
                        'am_spadina_baseline',
                        'am_spadina_january',
                        'am_spadina_february',
                        'am_spadina_march',
                        'am_spadina_april',
                        'am_spadina_may',
                        'am_spadina_june']]

# bay
pvol_bay_am = pvol[['street',
                    'am_bay_baseline',
                    'am_bay_january',
                    'am_bay_february',
                    'am_bay_march',
                    'am_bay_april',
                    'am_bay_may',
                    'am_bay_june']]

# jarvis
pvol_jarvis_am = pvol[['street',
                       'am_jarvis_baseline',
                       'am_jarvis_january',
                       'am_jarvis_february',
                       'am_jarvis_march',
                       'am_jarvis_april',
                       'am_jarvis_may',
                       'am_jarvis_june']]

#### pm objects
# bathurst
pvol_bathurst_pm = pvol[['street',
                         'pm_bathurst_baseline',
                         'pm_bathurst_january',
                         'pm_bathurst_february',
                         'pm_bathurst_march',
                         'pm_bathurst_april',
                         'pm_bathurst_may',
                         'pm_bathurst_june']]

# spadina
pvol_spadina_pm = pvol[['street',
                        'pm_spadina_baseline',
                        'pm_spadina_january',
                        'pm_spadina_february',
                        'pm_spadina_march',
                        'pm_spadina_april',
                        'pm_spadina_may',
                        'pm_spadina_june']]

# bay
pvol_bay_pm = pvol[['street',
                    'pm_bay_baseline',
                    'pm_bay_january',
                    'pm_bay_february',
                    'pm_bay_march',
                    'pm_bay_april',
                    'pm_bay_may',
                    'pm_bay_june']]

# jarvis
pvol_jarvis_pm = pvol[['street',
                       'pm_jarvis_baseline',
                       'pm_jarvis_january',
                       'pm_jarvis_february',
                       'pm_jarvis_march',
                       'pm_jarvis_april',
                       'pm_jarvis_may',
                       'pm_jarvis_june']]
#+END_SRC
#+RESULTS:

Create a grouped bar chart using the plotly library:
#+ipynb-newcell
#+BEGIN_SRC ipython
#### plotly-based grouped bar charts
# AM Bathurst
baseline = go.Bar(
    x=pvol['street'],
    y=pvol['am_bathurst_baseline'],
    name='AM Bathurst Baseline',
    hoverinfo='y+name'
)
january = go.Bar(
    x=pvol['street'],
    y=pvol['am_bathurst_january'],
    name='AM Bathurst January',
    hoverinfo='y+name'
)
february = go.Bar(
    x=pvol['street'],
    y=pvol['am_bathurst_february'],
    name='AM Bathurst February',
    hoverinfo='y+name'
)
march = go.Bar(
    x=pvol['street'],
    y=pvol['am_bathurst_march'],
    name='AM Bathurst March',
    hoverinfo='y+name'
)
april = go.Bar(
    x=pvol['street'],
    y=pvol['am_bathurst_april'],
    name='AM Bathurst April',
    hoverinfo='y+name'
)
may = go.Bar(
    x=pvol['street'],
    y=pvol['am_bathurst_may'],
    name='AM Bathurst May',
    hoverinfo='y+name'
)
june = go.Bar(
    x=pvol['street'],
    y=pvol['am_bathurst_june'],
    name='AM Bathurst June',
    hoverinfo='y+name'
)

data = [baseline, january, february, march, april, may, june]
layout = go.Layout(
    barmode='group',
    # bargap=0.15,
    bargroupgap=0.1,
    hovermode='closest'
    # showlegend=False
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='grouped-bar')
#+END_SRC
#+RESULTS:

The dataframe provides data for the 7-10 am and 4-7 pm peak periods at the intersections Bathurst, Spadina, Bay, and Jarvis at both King and Queen. Change your arguments accordingly to prepare different charts using plotly.

Using the standard pandas plotting functions (which rely on matplotlib), you can use the following to prepare static charts:
#+ipynb-newcell
#+BEGIN_SRC ipython
pvol_bathurst_am.plot.bar(x='street', 
                          rot=0,
                          width=0.85, 
                          title='AM Peak Pedestrian Volume Measured at Bathurst');
#+END_SRC
#+RESULTS:

If you want horizontal charts, you can chain barh to the plot method:
#+ipynb-newcell
#+BEGIN_SRC ipython
pvol_bathurst_am.plot.barh(x='street', 
                           rot=0,
                           width=0.85,
                           title='AM Peak Pedestrian Volume Measured at Bathurst');
#+END_SRC
#+RESULTS:
* Creating Maps
- GIS for Blender: https://github.com/domlysz/BlenderGIS
* Modeling
Some blender tips:
- 
- 

There are numerous software applications that you might use for preparing models prior to setting them up to print. Among them, I recommend meshlab http://www.meshlab.net/, meshmixer http://www.meshmixer.com/, and cotangent https://www.cotangent.io/.
* Printing Considerations
Some things to think about if you're preparing tactile models for blind users. 
- Braille is very tricky to print. If you're using an FDM printer, be careful that traces of excess filament are not being dragged across the dots. 
- Printing does not have to be static. Think about how to separate your models into individual, reconfigurable/modular chunks in order to create dynamic data representations.
